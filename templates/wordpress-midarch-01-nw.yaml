AWSTemplateFormatVersion: 2010-09-09
Description: WordPress Middle Scale Architecture Network
Parameters:
  PublicSubnetCIDR1:
    Description: CIDR Block for the Public Subnet 1
    Type: String
    Default: 172.16.0.0/24
    AllowedPattern: '[a-zA-Z0-9]+\..+'
  PublicSubnetCIDR2:
    Description: CIDR Block for the Public Subnet 2
    Type: String
    Default: 172.16.1.0/24
    AllowedPattern: '[a-zA-Z0-9]+\..+'
  PrivateSubnetCIDR1:
    Description: CIDR Block for the Private Subnet 1
    Type: String
    Default: 172.16.2.0/23
    AllowedPattern: '[a-zA-Z0-9]+\..+'
  PrivateSubnetCIDR2:
    Description: CIDR Block for the Private Subnet 2
    Type: String
    Default: 172.16.4.0/23
    AllowedPattern: '[a-zA-Z0-9]+\..+'
  VPCCIDR:
    Description: CIDR Block for the VPC
    Type: String
    Default: 172.16.0.0/16
    AllowedPattern: '[a-zA-Z0-9]+\..+'
  AZ1:
    Description: input Availability Zone
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Default: ap-northeast-1a
  AZ2:
    Description: input Availability Zone
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Default: ap-northeast-1c
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - VPC
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR1
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Ref AZ1
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - PublicSubnet01
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
        - Key: Role
          Value: Public Subnet
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR2
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Ref AZ2
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - PublicSubnet02
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
        - Key: Role
          Value: Public Subnet
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR1
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Ref AZ1
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - PrivateSubnet01
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
        - Key: Role
          Value: Public Subnet
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR2
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Ref AZ2
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - PrivateSubnet02
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
        - Key: Role
          Value: Public Subnet
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - IG
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - PublicRT
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public Subnet
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - PrivateRT
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public Subnet
  PrivateSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  LBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTPS access on port 443
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - ELBSG
  WebSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access on port 80
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref LBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - WebSG
  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access on port 80
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref WebSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - DBSG
Outputs:
  VPCId:
    Value: !Ref VPC
    Description: VPC ID
  PublicSubnetId1:
    Value: !Ref PublicSubnet1
    Description: Subnet ID for the public subnet1
  PublicSubnetId2:
    Value: !Ref PublicSubnet2
    Description: Subnet ID for the public subnet2
  PrivateSubnetId1:
    Value: !Ref PrivateSubnet1
    Description: Subnet ID for the private subnet1
  PrivateSubnetId2:
    Value: !Ref PrivateSubnet2
    Description: Subnet ID for the private subnet2
  AZ1:
    Value: !Ref AZ1
    Description: AZ1
  AZ2:
    Value: !Ref AZ2
    Description: AZ2
  LBSecurityGroup:
    Value: !Ref LBSecurityGroup
    Description: Security Group for LoadBalancer Layer
  WebSecurityGroup:
    Value: !Ref WebSecurityGroup
    Description: Security Group for Web Layer
  DBSecurityGroup:
    Value: !Ref DBSecurityGroup
    Description: Security Group for DB Layer
